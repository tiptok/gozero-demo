// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package userservice

import (
	"context"

	"zero-demo/app/usercenter/cmd/rpc/pb/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	UserDeleteReq  = user.UserDeleteReq
	UserDeleteResp = user.UserDeleteResp
	UserGetReq     = user.UserGetReq
	UserGetResp    = user.UserGetResp
	UserItem       = user.UserItem
	UserSaveReq    = user.UserSaveReq
	UserSaveResp   = user.UserSaveResp
	UserSearchReq  = user.UserSearchReq
	UserSearchResp = user.UserSearchResp
	UserUpdateReq  = user.UserUpdateReq
	UserUpdateResp = user.UserUpdateResp

	UserService interface {
		UserGet(ctx context.Context, in *UserGetReq, opts ...grpc.CallOption) (*UserGetResp, error)
		UserSave(ctx context.Context, in *UserSaveReq, opts ...grpc.CallOption) (*UserSaveResp, error)
		UserDelete(ctx context.Context, in *UserDeleteReq, opts ...grpc.CallOption) (*UserDeleteResp, error)
		UserUpdate(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*UserUpdateResp, error)
		UserSearch(ctx context.Context, in *UserSearchReq, opts ...grpc.CallOption) (*UserSearchResp, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

func (m *defaultUserService) UserGet(ctx context.Context, in *UserGetReq, opts ...grpc.CallOption) (*UserGetResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.UserGet(ctx, in, opts...)
}

func (m *defaultUserService) UserSave(ctx context.Context, in *UserSaveReq, opts ...grpc.CallOption) (*UserSaveResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.UserSave(ctx, in, opts...)
}

func (m *defaultUserService) UserDelete(ctx context.Context, in *UserDeleteReq, opts ...grpc.CallOption) (*UserDeleteResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.UserDelete(ctx, in, opts...)
}

func (m *defaultUserService) UserUpdate(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*UserUpdateResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.UserUpdate(ctx, in, opts...)
}

func (m *defaultUserService) UserSearch(ctx context.Context, in *UserSearchReq, opts ...grpc.CallOption) (*UserSearchResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.UserSearch(ctx, in, opts...)
}
